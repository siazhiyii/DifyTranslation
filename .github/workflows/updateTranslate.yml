name: Translate

on:
  push:
    branches: [ "*" ]
    paths:
      - src/en-us/**
  workflow_dispatch:

jobs:
  translate:
    runs-on: ubuntu-latest
    env:
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install python3 python3-pip
        pip3 install requests

    - name: Get changed files in src/en-us since last push
      id: get_changes
      run: |
        git fetch origin main
        # Get all changed files in src/en-us since the last push
        CHANGED_FILES=$(git diff --name-only origin/main -- src/en-us/)
        
        # Fix the paths (replace spaces with underscores, for example)
        FIXED_CHANGED_FILES=$(echo "$CHANGED_FILES" | sed 's/ /_/g')
    
        # Output the changed files
        echo "Changed files in src/en-us since last push:"
        echo "$FIXED_CHANGED_FILES"
        
        # Set the fixed changed files as an output variable
        echo "changed_files=$FIXED_CHANGED_FILES" >> $GITHUB_ENV

    - name: Process each changed file
      if: env.changed_files != ''
      run: |
        IFS=$'\n' # Set Internal Field Separator to newline
        for file in ${{ env.changed_files }}; do
          file="${file//_/ }"
          echo "Currently translating: $file"
          base_path=$(dirname "$file")
          base_name=$(basename "$file")
          
          # Construct paths for old and translation files
          old_eng_file="${base_path}/${base_name}"
          zh_hk_file="${base_path/en-us/zh-hk}/${base_name}"

          # Fetch the old English file from origin/main
          git checkout origin/main -- "${file}"
          old_eng_content="${file}"

          # Check if the corresponding Chinese file exists
          translation_file_content=""
          if [ -f "${zh_hk_file}" ]; then
              translation_file_content="${zh_hk_file}"
          fi

          # Read the updated English file
          git checkout HEAD -- "${file}"
          new_eng_content="${file}"

          echo "$old_eng_content"
          echo "$translation_file_content"
          echo "$new_eng_content"

          
          # Call Dify API to translate
          python3 -c "
        import requests
        import os
        
        def upload_file(file_path, user):
            upload_url = 'https://api.dify.ai/v1/files/upload'
            headers = {
                'Authorization': f'Bearer {os.environ['DIFY_API_KEY']}',
            }
        
            print(f'Uploading file: {file_path}...')
            with open(file_path, 'rb') as file:
                files = {
                    'file': (file_path, file, 'text/markdown')
                }
                data = {
                    'user': user,
                    'type': 'MD'
                }
                
                response = requests.post(upload_url, headers=headers, files=files, data=data)
                if response.status_code == 201:
                    print('File uploaded successfully')
                    return response.json().get('id')
                else:
                    print(f'File upload failed, status code: {response.status_code}')
                    return None
        
        def run_workflow(old_file_id, new_file_id, translation_file_id, user, target_lang='chinese'):
            workflow_url = 'https://api.dify.ai/v1/workflows/run'
            headers = {
                'Authorization': f'Bearer {os.environ['DIFY_API_KEY']}',
                'Content-Type': 'application/json'
            }
        
            data = {
                'inputs': {
                    'target_lang': target_lang,
                    'old_eng_file': {
                        'transfer_method': 'local_file',
                        'upload_file_id': old_file_id,
                        'type': 'document'
                    },
                    'new_eng_file': {
                        'transfer_method': 'local_file',
                        'upload_file_id': new_file_id,
                        'type': 'document'
                    },
                    'translation_file': {
                        'transfer_method': 'local_file',
                        'upload_file_id': translation_file_id,
                        'type': 'document'
                    }
                },
                'user': user
            }
        
            print('Running Workflow...')
            response = requests.post(workflow_url, headers=headers, json=data)
            if response.status_code == 200:
                print('Workflow execution successful')
                return response.json()
            else:
                print(f'Workflow execution failed, status code: {response.status_code}')
                return {'status': 'error', 'message': f'Failed to execute workflow, status code: {response.status_code}'}
        
        # Main execution
        user = 'testUser123'
        
        old_file_id = upload_file('${old_eng_content}', user)
        new_file_id = upload_file('${new_eng_content}', user)
        translation_file_id = upload_file('${translation_file_content}', user) if translation_file_content else None
        
        if old_file_id and new_file_id and translation_file_id:
            result = run_workflow(old_file_id, new_file_id, translation_file_id, user)
            print(result)
        else:
            print('One or more file uploads failed, and workflow cannot be executed.')
        "
            done
