name: Translate

on:
  push:
    branches: [ "*" ]
    paths:
      - src/en-us/**
  workflow_dispatch:

jobs:
  translate:
    runs-on: ubuntu-latest
    env:
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install python3 python3-pip
        pip3 install requests

    - name: Get changed files in src/en-us since last push
      id: get_changes
      run: |
        git fetch origin main
        # Get all changed files in src/en-us since the last push
        CHANGED_FILES=$(git diff --name-only origin/main -- src/en-us/)
        
        # Fix the paths (replace spaces with underscores, for example)
        FIXED_CHANGED_FILES=$(echo "$CHANGED_FILES" | sed 's/ /_/g')
    
        # Output the changed files
        echo "Changed files in src/en-us since last push:"
        echo "$FIXED_CHANGED_FILES"
        
        # Set the fixed changed files as an output variable
        echo "changed_files=$FIXED_CHANGED_FILES" >> $GITHUB_ENV

    - name: Process each changed file
      if: env.changed_files != ''
      run: |
        IFS=$'\n' # Set Internal Field Separator to newline
        for file in ${{ env.changed_files }}; do
          file="${file//_/ }"
          echo "Currently translating: $file"
          base_path=$(dirname "$file")
          base_name=$(basename "$file")
          echo "$base_path"
          echo "$base_name"
          
          # Construct paths for old and translation files
          old_eng_file="${base_path}/${base_name}"
          zh_hk_file="${base_path}/${base_name}"
          zh_hk_file=zh_hk_file.replace("en-us","zh-hk")
          echo "$old_eng_file"
          echo "$zh_hk_file"

          # Fetch the old English file from origin/main
          git checkout origin/main -- "${file}"
          old_eng_content=$(cat "${file}")

          # Check if the corresponding Chinese file exists
          translation_file_content=""
          if [ -f "${zh_hk_file}" ]; then
              translation_file_content=$(cat "${zh_hk_file}")
          fi

          # Read the updated English file
          new_eng_content=$(cat "${file}")

          # Call Dify API to translate
          python3 -c "
        import requests
        import os
        import json

        url = 'https://api.dify.ai/v1'
        headers = {'Authorization': f'Bearer {os.environ['DIFY_API_KEY']}',
        'Content-Type': 'application/json',
        }

        data = {
          'inputs': {
            'target_lang': 'chinese',
            'old_eng_file': '''${old_eng_content}''',
            'new_eng_file': '''${new_eng_content}''',
            'translation_file': '''${translation_file_content}'''
          },
          'user': 'testUser123'
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            chinese_text = response.json()['blog_translated']
            with open('${zh_hk_file}', 'w', encoding='utf-8') as file:
                file.write(chinese_text)
        else:
            print(f'Error: {response.status_code} - {response.text}')
        "
          done
