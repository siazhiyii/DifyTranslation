name: Translate

on:
  push:
    branches: [ "main" ]
    paths:
      - src/en-us/**
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  translate:
    runs-on: ubuntu-latest
    env:
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install python3 python3-pip
        pip3 install requests

    - name: Get changed files after a specific commit
      id: get_changes
      run: |
        # Specify the commit hash you want to compare against
        COMMIT_HASH=<commit_hash>  # Replace with your specific commit hash
        CHANGED_FILES=$(git diff --name-only $COMMIT_HASH HEAD)

        # Output the changed files
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Set the changed files as an output variable (if needed)
        echo "::set-output name=changed_files::$CHANGED_FILES"

    - name: Check for changed files
      id: check_changes
      run: |
        # Fetch the last two commits to ensure we have the history
        git fetch --depth=2

        # Get changed files in the last commit
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^src/en-us/')
        
        # Set changed_files environment variable
        if [ -z "$CHANGED_FILES" ]; then
          echo "No changed files found."
          echo "changed_files=" >> $GITHUB_ENV
        else
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_ENV
        fi


    - name: Process each changed file
      if: env.changed_files != ''
      run: |
        IFS=$'\n' # Set Internal Field Separator to newline
        for file in ${{ env.changed_files }}; do
          base_path=$(dirname "$file")
          base_name=$(basename "$file")
          chinese_file="src/zh-hk/${base_path}/${base_name}"

          mkdir -p "src/zh-hk/${base_path}"

          # Call Dify API to translate
          python3 -c "
          import requests
          import os
          
          url = 'https://api.dify.ai/v1'
          headers = {'Authorization': f'Bearer {os.environ['DIFY_API_KEY']}', 'Content-Type': 'application/json'}
          
          # Read the updated English file
          with open('${file}', 'r', encoding='utf-8') as new_eng_file:
              new_eng_text = new_eng_file.read()
          
          # Check if the corresponding Chinese file exists
          if os.path.exists('${chinese_file}'):
              with open('${chinese_file}', 'r', encoding='utf-8') as old_chinese_file:
                  old_chinese_text = old_chinese_file.read()
          else:
              old_chinese_text = ''  # If no previous Chinese translation exists
          
          # Get the old English file from the previous commit
          old_eng_file_path = '${file}'  # Current file path
          old_eng_file_name = old_eng_file_path.replace('en-us/', 'old_en-us/')  # Adjust path for old file
          if os.path.exists(old_eng_file_name):
              with open(old_eng_file_name, 'r', encoding='utf-8') as old_eng_file:
                  old_eng_text = old_eng_file.read()
          else:
              old_eng_text = ''  # No previous English file exists
          
          data = {
            'inputs': {
              'target_lang': 'chinese',
              'old_eng_file': old_eng_text,
              'new_eng_file': new_eng_text,
              'translation_file': old_chinese_text  # Existing Chinese content to update
            },
            'user': 'testUser123'
          }
          
          response = requests.post(url, headers=headers, json=data)
  
          if response.status_code == 200:
              chinese_text = response.json()['blog_translated']
              with open('${chinese_file}', 'w', encoding='utf-8') as file:
                  file.write(chinese_text)
          else:
              print(f'Error: {response.status_code} - {response.text}')
          "
          
                  done
                done
